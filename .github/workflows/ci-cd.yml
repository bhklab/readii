name: ci-cd

# only run on pushes to main or pull requests
on:
  push:
    branches: ["*"]
  pull_request:
    branches: [main]

jobs:
  Unit-Testing:
    # Set up operating system
    runs-on: ubuntu-latest

    # Define job steps
    steps:
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Check-out repository
        uses: actions/checkout@v3

      - name: Install poetry
        uses: snok/install-poetry@v1

      - name: Install package
        run: poetry install

      - name: Test with pytest
        # Github action runners now have 4 cores
        run: poetry run pytest -s -v -n 4 tests/

      # Commented out until we have a repo for coverage
      # - name: Test with pytest
      #   run: poetry run pytest tests/ --cov=readii --cov-report=xml

      # - name: Use Codecov to track coverage
      #   uses: codecov/codecov-action@v3
      #   with:
      #     files: ./coverage.xml   # coverage report

  Continuous-Deployment:
    needs: Unit-Testing

    # # Only run this job if new work is pushed to "main"
    if: github.ref == 'refs/heads/main'

    # Set up operating system
    runs-on: ubuntu-latest

    outputs:
      released: ${{ steps.release.outputs.released }}
      version: ${{ steps.release.outputs.version }}
      tag: ${{ steps.release.outputs.tag }}

    # Define job steps
    steps:
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Check-out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install poetry
        uses: snok/install-poetry@v1

      - name: Install package
        run: poetry install

      # This action uses Python Semantic Release v8
      - name: Python Semantic Release
        id: release
        uses: python-semantic-release/python-semantic-release@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Test Outputs of semantic release step
        run: |
          echo "${{ steps.release.outputs.released }}"
          echo "${{ steps.release.outputs.version }}"
          echo "${{ steps.release.outputs.tag }}"

  Publish-To-PyPI:
    needs: Continuous-Deployment
    if: ${{ needs.Continuous-Deployment.outputs.released == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code with tag ${{ needs.Continuous-Deployment.outputs.tag }}
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.Continuous-Deployment.outputs.tag }}

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"

      - name: Install poetry
        uses: snok/install-poetry@v1

      - name: Install Package Building Tool
        run: python3 -m pip install build twine

      - name: Build Package
        run: |
          poetry version ${{ needs.Continuous-Deployment.outputs.version }}
          python -m build --sdist --wheel --outdir dist/ .
          ls dist/

      - name: Publish to TestPyPI
        if: steps.release.outputs.released == 'true'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository-url: https://test.pypi.org/legacy/

      - name: Test install from TestPyPI
        run: |
          pip install \
          --index-url https://test.pypi.org/simple/ \
          --extra-index-url https://pypi.org/simple \
          readii

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}

  Build-Docker-Images:
    needs: [Continuous-Deployment, Publish-To-PyPI]
    if: ${{ needs.Continuous-Deployment.outputs.released == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code with tag ${{ needs.Continuous-Deployment.outputs.tag }}
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.Continuous-Deployment.outputs.tag }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.BHKLAB_DOCKERHUB_USERNAME }}
          password: ${{ secrets.BHKLAB_DOCKERHUB_ACCESS_KEY }}

      - name: Login to the GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: |
            bhklab/readii:${{ needs.Continuous-Deployment.outputs.tag }}
            ghcr.io/${{ github.repository }}/readii:${{ needs.Continuous-Deployment.outputs.tag }}
      - name: Build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: macos/amd64,linux/amd64, macos/arm64, linux/arm64
          file: ./Dockerfile
          push: true
          tags: |
            bhklab/readii:${{ needs.Continuous-Deployment.outputs.tag }}
            bhklab/readii:latest
            ghcr.io/${{ github.repository }}/readii:${{ needs.Continuous-Deployment.outputs.tag }}
            ghcr.io/${{ github.repository }}/readii:latest
          labels: ${{ steps.meta.outputs.labels }}
