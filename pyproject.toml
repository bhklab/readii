[project]
name = "readii"
version = "1.27.0"
description = "A package to extract radiomic features!"
authors = [{ name = "Katy Scott", email = "Katy.Scott@uhn.ca" }]

license = "MIT"
readme = "README.md"
dependencies = [
  "simpleitk>=2.3.1",
  "matplotlib>=3.9.2,<4",
  "med-imagetools>=1.9.2",
  "pydicom>=2.3.1",
  "pyradiomics-bhklab>=3.1.4,<4", 
  "orcestra-downloader>=0.9.0,<1",
  "numpy==1.26.4.*",
  "seaborn>=0.13.2,<0.14",
  "pandas>=2.2.3,<3"
]
requires-python = ">=3.10, <3.13"

classifiers = [
  "License :: OSI Approved :: MIT License",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
]

[project.scripts]
readii = "readii.pipeline:main"
readii-datasets = "readii.cli.main:cli"

[tool.pixi.project]
channels = ["conda-forge"]
platforms = ["linux-64", "osx-arm64", "osx-64", "win-64"]

[tool.pixi.dependencies]


[tool.pixi.pypi-dependencies]
readii = { path = ".", editable = true }

[tool.pixi.environments]
dev = { features = ["test", "style", "docs", "dev"], solve-group = "default" }
docs = { features = ["docs"], solve-group = "default" }
publish = { features = ["build", "release"], solve-group = "default" }
py310 = ["py310", "test"]
py311 = ["py311", "test"]
py312 = ["py312", "test"]

############################################## python ###############################################

[tool.pixi.feature.py310.dependencies]
python = "3.10.*"
[tool.pixi.feature.py311.dependencies]
python = "3.11.*"
[tool.pixi.feature.py312.dependencies]
python = "3.12.*"


[tool.pixi.feature.dev.dependencies]
jupyterlab = ">=4.3.1,<5"
pixi-kernel = ">=0.5.1,<0.6"
ipykernel = ">=6.29.5,<7"
pip = "*"

############################################## TEST ################################################

[tool.pixi.feature.test.dependencies]
pytest = "*"
pytest-cov = "*"
pytest-xdist = "*"

[tool.pixi.feature.test.tasks.test]
cmd = [
  "pytest",
  "--numprocesses=auto",
  "-s",
  "--verbose",
  "--cov=readii",
  "--cov-report=xml:coverage-report/coverage.xml",
  "--cov-config=config/coverage.toml",
]
inputs = ["src", "tests", "config/coverage.toml"]
outputs = ["coverage-report/coverage.xml"]
description = "Run pytest (Note: run `coverage` task to do both)"

[tool.pixi.feature.test.tasks.coverage]
cmd = "coverage report --rcfile=config/coverage.toml"
inputs = ["coverage-report/coverage.xml", "config/coverage.toml"]
depends-on = ["test"]
description = "Run pytest and generate coverage report"

############################################## DOCS ################################################
[tool.pixi.feature.docs.dependencies]
mkdocs = ">=1.6"
mike = ">=2.1"
mkdocs-material = ">=9.5.44,<10"
mkdocstrings = ">=0.27.0,<0.28"
mkdocstrings-python = ">=1.12.2,<2"
mkdocs-include-markdown-plugin = ">=7.1.1,<8"
mkdocs-git-authors-plugin = ">=0.9.0,<0.10"
mkdocs-git-revision-date-localized-plugin = ">=1.2.9,<2"

[tool.pixi.feature.docs.pypi-dependencies]
mkdocs-awesome-pages-plugin = ">=2.9.3, <3"

[tool.pixi.feature.docs.tasks.doc-build]
cmd = "mkdocs build -f mkdocs.yaml"
inputs = ["docs", "mkdocs.yaml"]
outputs = ["site"]

[tool.pixi.feature.docs.tasks.doc-serve]
cmd = "mkdocs serve -f mkdocs.yaml"
inputs = ["docs", "mkdocs.yaml"]

############################################## STYLE ###############################################
# See config/ruff.toml for the configuration
[tool.pixi.feature.style.dependencies]
ruff = ">=0.4.4"
pre-commit = ">=3.7.1,<3.8"
mypy = ">=1.13.0,<2"
scipy-stubs = ">=1.14.1.5,<2"

[tool.pixi.feature.style.tasks._lint]
cmd = "ruff check  --config=config/ruff.toml"
inputs = ["src", "config/ruff.toml"]
description = "Run ruff linter"

[tool.pixi.feature.style.tasks._format]
cmd = "ruff format --config=config/ruff.toml"
inputs = ["src", "config/ruff.toml"]
description = "Run ruff formatter, use `--diff` to see changes only"

[tool.pixi.feature.style.tasks.qc]
depends_on = ["_lint", "_format"]
description = "Run all quality control tasks"

#################################### RELEASE & BUILD ###############################################

[tool.pixi.feature.release.dependencies]
python-semantic-release = "*"

[tool.pixi.feature.release.tasks]
semver = 'echo "Next Version is: $(semantic-release version --print)"'
release = "semantic-release version"

[tool.semantic_release]
version_variables = ["src/readii/__init__.py:__version__"]
version_toml = ["pyproject.toml:project.version"]          # version location
changelog_file = "CHANGELOG.md"                            # changelog file
dist_path = "dist/"                                        # where to put dists
upload_to_release = true                                   # auto-create GitHub release
remove_dist = false                                        # don't remove dists
patch_without_tag = true                                   # patch release by default

[tool.semantic_release.branches.main]
match = "(main|development)"

[tool.pixi.feature.build.dependencies]
hatch = "*"

[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[tool.hatch.build]
directory = "dist"

[tool.hatch.build.targets.wheel]
packages = ["src/readii"]
include = ["pyproject.toml", "README.md", "src/**", "config/hatch.toml"]

[tool.hatch.build.targets.sdist]
include = ["pyproject.toml", "README.md", "src/", "config/hatch.toml"]
exclude = ["tests/**"]

[tool.pixi.feature.build.tasks]
# Builds the package
build = { cmd = [
  "hatch",
  "build",
  "--clean",
], inputs = [
  "src",
  "pyproject.toml",
], outputs = [
  "dist/*",
], description = "Build the package" }

# Publishes the package to the main PYPI repository, depends on the build task
publish-pypi = { cmd = [
  "hatch",
  "publish",
  "--yes",
  "--repo",
  "main",
], inputs = [
  "dist/*",
], depends-on = [
  "build",
], description = "Publish to main PyPI" }

publish-test = { cmd = [
  "hatch",
  "publish",
  "--yes",
  "--repo",
  "test",
], inputs = [
  "dist/*",
], depends-on = [
  "build",
], description = "Publish to test PyPI" }
